//Task 01
//Problem: A vehicle rental company is expanding its services to include cars, bikes, and
//future vehicle types. They need a flexible system to manage daily rates and display vehicle
//details without exposing internal calculations. The goal is to ensure new vehicle types (e.g.,
//scooters, trucks) can be added seamlessly while maintaining a consistent interface for
//customers to view rental options.
//Classes and Structure:
//• Abstract Class Vehicle:
//o Data Members:
//▪ model (string): Stores the vehicle’s model name.
//▪ rate (double): Stores the daily rental rate.
//o Member Functions:
//▪ getDailyRate(): Pure virtual function to return the daily rate.
//▪ displayDetails(): Pure virtual function to show model and rate.
//
//• Derived Class Car:
//o Inherits model and rate from Vehicle.
//o Overrides getDailyRate() and displayDetails() to provide car-specific
//behavior.
//• Derived Class Bike:
//o Inherits model and rate from Vehicle.
//o Overrides getDailyRate() and displayDetails() to provide bike-specific
//behavior.
//
//Flow:
//• Create Car and Bike objects.
//• Use polymorphism to call displayDetails() and getDailyRate() for each vehicle.

#include <iostream>
#include <string>
using namespace std;

class Vehicle {
protected:
    string model;
    double rate;
public:
    virtual double getDailyRate() = 0;
    virtual void displayDetails() = 0;
};

class Car : public Vehicle {
public:
    Car(double r, string m) {
        rate = r;
        model = m;
    }
    double getDailyRate() {
        return rate;
    }
    void displayDetails() {
        cout << "Car Model: " << model << endl;
        cout << "Car rate: " << rate << endl;
    }
};

class Bike : public Vehicle {
public:
    Bike(double r, string m) {
        rate = r;
        model = m;
    }
    double getDailyRate() {
        return rate;
    }
    void displayDetails() {
        cout << "Bike Model: " << model << endl;
        cout << "Bike rate: " << rate << endl;
    }
};

int main() {
    double car_r, bike_r;

    Car car(2400, "Toyota Corolla");
    Bike bike(650, "Honda 150");

    Vehicle* bptr1 = &car;
    Vehicle* bptr2 = &bike;

    car_r = bptr1->getDailyRate();
    bptr1->displayDetails();

    bike_r = bptr2->getDailyRate();
    bptr2->displayDetails();

    return 0;
}
